/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kunall17.textbuilder;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import java.util.logging.Logger;

import static javax.swing.JOptionPane.showMessageDialog;

public class GenerateTextForm extends javax.swing.JFrame {

    BuilderTableModel tm;
    int numberOfPlaceHolders = -1;
    String text;
    GenerateTextInterface generateTextInterface;
    final JFrame jFrame;

    public void setGenerateTextInterface(GenerateTextInterface generateTextInterface) {
        this.generateTextInterface = generateTextInterface;
    }

    /**
     * Creates new form GenerateTextForm
     */
    public GenerateTextForm(int numberOfPlaceHolders, String text) {
        initComponents();

        this.text = text;
        this.numberOfPlaceHolders = numberOfPlaceHolders;
        tm = new BuilderTableModel(numberOfPlaceHolders);
        jTable1.setModel(tm);

//        setupMenuBar();
        jFrame = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        addFileList = new javax.swing.JMenuItem();
        menuAddRows = new javax.swing.JMenuItem();
        addFullPathList = new javax.swing.JMenuItem();
        generateNumbers = new javax.swing.JMenuItem();
        generateAlphabets = new javax.swing.JMenuItem();
        clearTable = new javax.swing.JMenuItem();
        generateMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("Fill with");
        jMenu1.add(jSeparator1);

        addFileList.setText("Add file list");
        addFileList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileListActionPerformed(evt);
            }
        });
        jMenu1.add(addFileList);

        menuAddRows.setText("Add Rows");
        menuAddRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddRowsActionPerformed(evt);
            }
        });
        jMenu1.add(menuAddRows);

        addFullPathList.setText("Add Full path list");
        addFullPathList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFullPathListActionPerformed(evt);
            }
        });
        jMenu1.add(addFullPathList);

        generateNumbers.setText("Generate Numbers");
        generateNumbers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNumbersActionPerformed(evt);
            }
        });
        jMenu1.add(generateNumbers);

        generateAlphabets.setText("Generate alphabets");
        generateAlphabets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateAlphabetsActionPerformed(evt);
            }
        });
        jMenu1.add(generateAlphabets);

        clearTable.setText("Clear Table");
        clearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableActionPerformed(evt);
            }
        });
        jMenu1.add(clearTable);

        generateMenuItem.setText("Generate");
        generateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(generateMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Help");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateFinal() {
// TODO add your handling code here:
        // TODO add your handling code here:
        String t1 = text;

        StringBuilder finalString = new StringBuilder();
        for (int i = 0; i < tm.getRowCount(); i++) {

            for (int j = 0; j < numberOfPlaceHolders; j++) {
                text = text.replace(Constants.PLACEHOLDER_TEXT + j, tm.getValueAt(i, j).toString());
            }
            finalString.append(text + "\n");
            text = t1;
        }


        if (generateTextInterface != null) { //Check if started from plugin
            generateTextInterface.replaceText(finalString.toString());
            this.hide();
            return;
        }

        JFileChooser jfc = new JFileChooser();
        int result = jfc.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }
        if (result == JFileChooser.APPROVE_OPTION) {

            try {

                Files.write(Paths.get(jfc.getSelectedFile().getPath()),
                        finalString.toString().getBytes(), StandardOpenOption.CREATE);
                JOptionPane.showMessageDialog(rootPane, jfc.getSelectedFile().getName().toString() + " saved successfully");
            } catch (IOException ex) {
                Logger.getLogger(GenerateTextForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        boolean w = false;
        HelpForm hf = new HelpForm(w);
        hf.show();
        hf.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void menuAddRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddRowsActionPerformed
               Object result = JOptionPane.showInputDialog(this, "Enter Number of Rows to be added?");
        try {
            int no = Integer.parseInt(result.toString());
            for (int i = 0; i < no; i++) {
                tm.addRow();
            }
        } catch (Exception e1) {
            showMessageDialog(this, e1.toString());
        }
    }//GEN-LAST:event_menuAddRowsActionPerformed

    private void addFullPathListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFullPathListActionPerformed
        
        // TODO add your handling code here:
        if (jTable1.getSelectedColumnCount() == 0) {
            showMessageDialog(null, "No selected Column");

        } else {

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            fileChooser.setMultiSelectionEnabled(true);
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File[] selectedFile = fileChooser.getSelectedFiles();
                if (selectedFile.length == 1) {
                    tm.setValueAt(selectedFile[0].getAbsolutePath().toString(), jTable1.getSelectedRow(), jTable1.getSelectedColumn());
                } else {

                    for (int i = 0; i < selectedFile.length; i++) {
                        if (jTable1.getSelectedRow() + i >= jTable1.getRowCount()) {
                            tm.addRow();
                        }
                        tm.setValueAt(selectedFile[i].getAbsolutePath(), jTable1.getSelectedRow() + i, jTable1.getSelectedColumn());
                    }

                }

            }
        }

    }//GEN-LAST:event_addFullPathListActionPerformed

    private void generateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMenuItemActionPerformed
        // TODO add your handling code here:
        generateFinal();
    }//GEN-LAST:event_generateMenuItemActionPerformed

    private void addFileListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileListActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedColumnCount() == 0) {
            showMessageDialog(null, "No selected Column");

        } else {

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            fileChooser.setMultiSelectionEnabled(true);
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File[] selectedFile = fileChooser.getSelectedFiles();
                if (selectedFile.length == 1) {
                    tm.setValueAt(selectedFile[0].getAbsoluteFile().toString(), jTable1.getSelectedRow(), jTable1.getSelectedColumn());
                } else {

                    for (int i = 0; i < selectedFile.length; i++) {
                        if (jTable1.getSelectedRow() + i >= jTable1.getRowCount()) {
                            tm.addRow();
                        }
                        tm.setValueAt(selectedFile[i].getAbsoluteFile(), jTable1.getSelectedRow() + i, jTable1.getSelectedColumn());
                    }

                }

            }

        }
    }//GEN-LAST:event_addFileListActionPerformed

    private void generateNumbersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNumbersActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedColumnCount() == 0) {
            showMessageDialog(null, "No selected Column");

        } else {
            Object result = JOptionPane.showInputDialog(null, "Enter Numbers seperated by - (Eg. 4-11)");
            String[] sd = String.valueOf(result).split("-");
            int n1 = Integer.parseInt(sd[0]);
            int n2 = Integer.parseInt(sd[1]);

            for (int i = 0; i <= n2 - n1; i++) {
                if (jTable1.getSelectedRow() + i >= jTable1.getRowCount()) {
                    tm.addRow();
                }
                for (int j = 0; j < jTable1.getSelectedColumnCount(); j++) {

                    tm.setValueAt(n1 + i, jTable1.getSelectedRow() + i, jTable1.getSelectedColumn() + j);
                }
            }
        }
    }//GEN-LAST:event_generateNumbersActionPerformed

    private void generateAlphabetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateAlphabetsActionPerformed
         // TODO add your handling code here:
        if (jTable1.getSelectedColumnCount() == 0) {
            showMessageDialog(null, "No selected Column");

        } else {
            String s = (String) JOptionPane.showInputDialog(this,
                    "Enter the alphabets (Same case alphabets) Eg. A-Z",
                    "Alphabets", JOptionPane.OK_CANCEL_OPTION, null,
                    null, "A-Z");

            String[] d = s.split("-");
            char c1 = d[0].charAt(0);
            char c2 = d[1].charAt(0);

            int i = 0;
            do {
                if (jTable1.getSelectedRow() + i >= jTable1.getRowCount()) {
                    tm.addRow();
                }
                for (int j = 0; j < jTable1.getSelectedColumnCount(); j++) {
                    tm.setValueAt(c1, jTable1.getSelectedRow() + i, jTable1.getSelectedColumn() + j);
                }

                c1 = ((char) (getInt(c1) + 1));
                if (i++ > 55) {
                    break;
                }
            } while (c1 != c2);

            if (jTable1.getSelectedRow() + i >= jTable1.getRowCount()) {
                tm.addRow();
            }
            for (int j = 0; j < jTable1.getSelectedColumnCount(); j++) {
                tm.setValueAt(c1, jTable1.getSelectedRow() + i, jTable1.getSelectedColumn() + j);
            }
        }
    }//GEN-LAST:event_generateAlphabetsActionPerformed

    private void clearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableActionPerformed
        tm.clearAll();
    }//GEN-LAST:event_clearTableActionPerformed

    public int getInt(char c) {
        return (int) c;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFileList;
    private javax.swing.JMenuItem addFullPathList;
    private javax.swing.JMenuItem clearTable;
    private javax.swing.JMenuItem generateAlphabets;
    private javax.swing.JMenuItem generateMenuItem;
    private javax.swing.JMenuItem generateNumbers;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem menuAddRows;
    // End of variables declaration//GEN-END:variables
}
